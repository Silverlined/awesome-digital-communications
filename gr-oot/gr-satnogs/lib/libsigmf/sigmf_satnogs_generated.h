// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGMFSATNOGS_SATNOGS_H_
#define FLATBUFFERS_GENERATED_SIGMFSATNOGS_SATNOGS_H_

#include "flatbuffers/flatbuffers.h"

namespace satnogs {

struct Global;
struct GlobalBuilder;
struct GlobalT;

struct Capture;
struct CaptureBuilder;
struct CaptureT;

struct Annotation;
struct AnnotationBuilder;
struct AnnotationT;

struct Descr;
struct DescrBuilder;
struct DescrT;

inline const flatbuffers::TypeTable *GlobalTypeTable();

inline const flatbuffers::TypeTable *CaptureTypeTable();

inline const flatbuffers::TypeTable *AnnotationTypeTable();

inline const flatbuffers::TypeTable *DescrTypeTable();

struct GlobalT : public flatbuffers::NativeTable {
  typedef Global TableType;
  uint32_t station_id;
  uint64_t observation_id;
  std::string network_url;
  std::string tle;
  std::string transmitter;
  std::string encoding;
  std::string client_version;
  std::string observation_timeframe;
  uint64_t decoder_phase;
  double decoder_resampling_ratio;
  GlobalT()
    : station_id(0),
      observation_id(0),
      decoder_phase(0),
      decoder_resampling_ratio(0.0)
  {
  }
};

struct Global FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GlobalT NativeTableType;
  typedef GlobalBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable()
  {
    return GlobalTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATION_ID = 4,
    VT_OBSERVATION_ID = 6,
    VT_NETWORK_URL = 8,
    VT_TLE = 10,
    VT_TRANSMITTER = 12,
    VT_ENCODING = 14,
    VT_CLIENT_VERSION = 16,
    VT_OBSERVATION_TIMEFRAME = 18,
    VT_DECODER_PHASE = 20,
    VT_DECODER_RESAMPLING_RATIO = 22
  };
  uint32_t station_id() const
  {
    return GetField<uint32_t>(VT_STATION_ID, 0);
  }
  uint64_t observation_id() const
  {
    return GetField<uint64_t>(VT_OBSERVATION_ID, 0);
  }
  const flatbuffers::String *network_url() const
  {
    return GetPointer<const flatbuffers::String *>(VT_NETWORK_URL);
  }
  const flatbuffers::String *tle() const
  {
    return GetPointer<const flatbuffers::String *>(VT_TLE);
  }
  const flatbuffers::String *transmitter() const
  {
    return GetPointer<const flatbuffers::String *>(VT_TRANSMITTER);
  }
  const flatbuffers::String *encoding() const
  {
    return GetPointer<const flatbuffers::String *>(VT_ENCODING);
  }
  const flatbuffers::String *client_version() const
  {
    return GetPointer<const flatbuffers::String *>(VT_CLIENT_VERSION);
  }
  const flatbuffers::String *observation_timeframe() const
  {
    return GetPointer<const flatbuffers::String *>(VT_OBSERVATION_TIMEFRAME);
  }
  uint64_t decoder_phase() const
  {
    return GetField<uint64_t>(VT_DECODER_PHASE, 0);
  }
  double decoder_resampling_ratio() const
  {
    return GetField<double>(VT_DECODER_RESAMPLING_RATIO, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const
  {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_STATION_ID) &&
           VerifyField<uint64_t>(verifier, VT_OBSERVATION_ID) &&
           VerifyOffset(verifier, VT_NETWORK_URL) &&
           verifier.VerifyString(network_url()) &&
           VerifyOffset(verifier, VT_TLE) &&
           verifier.VerifyString(tle()) &&
           VerifyOffset(verifier, VT_TRANSMITTER) &&
           verifier.VerifyString(transmitter()) &&
           VerifyOffset(verifier, VT_ENCODING) &&
           verifier.VerifyString(encoding()) &&
           VerifyOffset(verifier, VT_CLIENT_VERSION) &&
           verifier.VerifyString(client_version()) &&
           VerifyOffset(verifier, VT_OBSERVATION_TIMEFRAME) &&
           verifier.VerifyString(observation_timeframe()) &&
           VerifyField<uint64_t>(verifier, VT_DECODER_PHASE) &&
           VerifyField<double>(verifier, VT_DECODER_RESAMPLING_RATIO) &&
           verifier.EndTable();
  }
  GlobalT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr)
  const;
  void UnPackTo(GlobalT *_o,
                const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Global> Pack(flatbuffers::FlatBufferBuilder &_fbb,
                                          const GlobalT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GlobalBuilder {
  typedef Global Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_station_id(uint32_t station_id)
  {
    fbb_.AddElement<uint32_t>(Global::VT_STATION_ID, station_id, 0);
  }
  void add_observation_id(uint64_t observation_id)
  {
    fbb_.AddElement<uint64_t>(Global::VT_OBSERVATION_ID, observation_id, 0);
  }
  void add_network_url(flatbuffers::Offset<flatbuffers::String> network_url)
  {
    fbb_.AddOffset(Global::VT_NETWORK_URL, network_url);
  }
  void add_tle(flatbuffers::Offset<flatbuffers::String> tle)
  {
    fbb_.AddOffset(Global::VT_TLE, tle);
  }
  void add_transmitter(flatbuffers::Offset<flatbuffers::String> transmitter)
  {
    fbb_.AddOffset(Global::VT_TRANSMITTER, transmitter);
  }
  void add_encoding(flatbuffers::Offset<flatbuffers::String> encoding)
  {
    fbb_.AddOffset(Global::VT_ENCODING, encoding);
  }
  void add_client_version(flatbuffers::Offset<flatbuffers::String>
                          client_version)
  {
    fbb_.AddOffset(Global::VT_CLIENT_VERSION, client_version);
  }
  void add_observation_timeframe(flatbuffers::Offset<flatbuffers::String>
                                 observation_timeframe)
  {
    fbb_.AddOffset(Global::VT_OBSERVATION_TIMEFRAME, observation_timeframe);
  }
  void add_decoder_phase(uint64_t decoder_phase)
  {
    fbb_.AddElement<uint64_t>(Global::VT_DECODER_PHASE, decoder_phase, 0);
  }
  void add_decoder_resampling_ratio(double decoder_resampling_ratio)
  {
    fbb_.AddElement<double>(Global::VT_DECODER_RESAMPLING_RATIO,
                            decoder_resampling_ratio, 0.0);
  }
  explicit GlobalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
    : fbb_(_fbb)
  {
    start_ = fbb_.StartTable();
  }
  GlobalBuilder &operator=(const GlobalBuilder &);
  flatbuffers::Offset<Global> Finish()
  {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Global>(end);
    return o;
  }
};

inline flatbuffers::Offset<Global> CreateGlobal(
  flatbuffers::FlatBufferBuilder &_fbb,
  uint32_t station_id = 0,
  uint64_t observation_id = 0,
  flatbuffers::Offset<flatbuffers::String> network_url = 0,
  flatbuffers::Offset<flatbuffers::String> tle = 0,
  flatbuffers::Offset<flatbuffers::String> transmitter = 0,
  flatbuffers::Offset<flatbuffers::String> encoding = 0,
  flatbuffers::Offset<flatbuffers::String> client_version = 0,
  flatbuffers::Offset<flatbuffers::String> observation_timeframe = 0,
  uint64_t decoder_phase = 0,
  double decoder_resampling_ratio = 0.0)
{
  GlobalBuilder builder_(_fbb);
  builder_.add_decoder_resampling_ratio(decoder_resampling_ratio);
  builder_.add_decoder_phase(decoder_phase);
  builder_.add_observation_id(observation_id);
  builder_.add_observation_timeframe(observation_timeframe);
  builder_.add_client_version(client_version);
  builder_.add_encoding(encoding);
  builder_.add_transmitter(transmitter);
  builder_.add_tle(tle);
  builder_.add_network_url(network_url);
  builder_.add_station_id(station_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Global> CreateGlobalDirect(
  flatbuffers::FlatBufferBuilder &_fbb,
  uint32_t station_id = 0,
  uint64_t observation_id = 0,
  const char *network_url = nullptr,
  const char *tle = nullptr,
  const char *transmitter = nullptr,
  const char *encoding = nullptr,
  const char *client_version = nullptr,
  const char *observation_timeframe = nullptr,
  uint64_t decoder_phase = 0,
  double decoder_resampling_ratio = 0.0)
{
  auto network_url__ = network_url ? _fbb.CreateString(network_url) : 0;
  auto tle__ = tle ? _fbb.CreateString(tle) : 0;
  auto transmitter__ = transmitter ? _fbb.CreateString(transmitter) : 0;
  auto encoding__ = encoding ? _fbb.CreateString(encoding) : 0;
  auto client_version__ = client_version ? _fbb.CreateString(client_version) : 0;
  auto observation_timeframe__ = observation_timeframe ? _fbb.CreateString(
                                   observation_timeframe) : 0;
  return satnogs::CreateGlobal(
           _fbb,
           station_id,
           observation_id,
           network_url__,
           tle__,
           transmitter__,
           encoding__,
           client_version__,
           observation_timeframe__,
           decoder_phase,
           decoder_resampling_ratio);
}

flatbuffers::Offset<Global> CreateGlobal(flatbuffers::FlatBufferBuilder &_fbb,
    const GlobalT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CaptureT : public flatbuffers::NativeTable {
  typedef Capture TableType;
  CaptureT()
  {
  }
};

struct Capture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CaptureT NativeTableType;
  typedef CaptureBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable()
  {
    return CaptureTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const
  {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  CaptureT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr)
  const;
  void UnPackTo(CaptureT *_o,
                const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Capture> Pack(flatbuffers::FlatBufferBuilder &_fbb,
      const CaptureT *_o, const flatbuffers::rehasher_function_t *_rehasher =
        nullptr);
};

struct CaptureBuilder {
  typedef Capture Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CaptureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
    : fbb_(_fbb)
  {
    start_ = fbb_.StartTable();
  }
  CaptureBuilder &operator=(const CaptureBuilder &);
  flatbuffers::Offset<Capture> Finish()
  {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Capture>(end);
    return o;
  }
};

inline flatbuffers::Offset<Capture> CreateCapture(
  flatbuffers::FlatBufferBuilder &_fbb)
{
  CaptureBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<Capture> CreateCapture(flatbuffers::FlatBufferBuilder &_fbb,
    const CaptureT *_o, const flatbuffers::rehasher_function_t *_rehasher =
      nullptr);

struct AnnotationT : public flatbuffers::NativeTable {
  typedef Annotation TableType;
  std::string pdu;
  bool decoder_crc_valid;
  double frequency_offset;
  uint64_t decoder_corrected_bits;
  std::string time;
  uint64_t decoder_symbol_erasures;
  double snr;
  std::string decoder_name;
  std::string decoder_version;
  double symbol_timing_error;
  AnnotationT()
    : decoder_crc_valid(false),
      frequency_offset(0.0),
      decoder_corrected_bits(0),
      decoder_symbol_erasures(0),
      snr(0.0),
      symbol_timing_error(0.0)
  {
  }
};

struct Annotation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationT NativeTableType;
  typedef AnnotationBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable()
  {
    return AnnotationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PDU = 4,
    VT_DECODER_CRC_VALID = 6,
    VT_FREQUENCY_OFFSET = 8,
    VT_DECODER_CORRECTED_BITS = 10,
    VT_TIME = 12,
    VT_DECODER_SYMBOL_ERASURES = 14,
    VT_SNR = 16,
    VT_DECODER_NAME = 18,
    VT_DECODER_VERSION = 20,
    VT_SYMBOL_TIMING_ERROR = 22
  };
  const flatbuffers::String *pdu() const
  {
    return GetPointer<const flatbuffers::String *>(VT_PDU);
  }
  bool decoder_crc_valid() const
  {
    return GetField<uint8_t>(VT_DECODER_CRC_VALID, 0) != 0;
  }
  double frequency_offset() const
  {
    return GetField<double>(VT_FREQUENCY_OFFSET, 0.0);
  }
  uint64_t decoder_corrected_bits() const
  {
    return GetField<uint64_t>(VT_DECODER_CORRECTED_BITS, 0);
  }
  const flatbuffers::String *time() const
  {
    return GetPointer<const flatbuffers::String *>(VT_TIME);
  }
  uint64_t decoder_symbol_erasures() const
  {
    return GetField<uint64_t>(VT_DECODER_SYMBOL_ERASURES, 0);
  }
  double snr() const
  {
    return GetField<double>(VT_SNR, 0.0);
  }
  const flatbuffers::String *decoder_name() const
  {
    return GetPointer<const flatbuffers::String *>(VT_DECODER_NAME);
  }
  const flatbuffers::String *decoder_version() const
  {
    return GetPointer<const flatbuffers::String *>(VT_DECODER_VERSION);
  }
  double symbol_timing_error() const
  {
    return GetField<double>(VT_SYMBOL_TIMING_ERROR, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const
  {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PDU) &&
           verifier.VerifyString(pdu()) &&
           VerifyField<uint8_t>(verifier, VT_DECODER_CRC_VALID) &&
           VerifyField<double>(verifier, VT_FREQUENCY_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_DECODER_CORRECTED_BITS) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyField<uint64_t>(verifier, VT_DECODER_SYMBOL_ERASURES) &&
           VerifyField<double>(verifier, VT_SNR) &&
           VerifyOffset(verifier, VT_DECODER_NAME) &&
           verifier.VerifyString(decoder_name()) &&
           VerifyOffset(verifier, VT_DECODER_VERSION) &&
           verifier.VerifyString(decoder_version()) &&
           VerifyField<double>(verifier, VT_SYMBOL_TIMING_ERROR) &&
           verifier.EndTable();
  }
  AnnotationT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr)
  const;
  void UnPackTo(AnnotationT *_o,
                const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Annotation> Pack(flatbuffers::FlatBufferBuilder
      &_fbb, const AnnotationT *_o,
      const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnnotationBuilder {
  typedef Annotation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pdu(flatbuffers::Offset<flatbuffers::String> pdu)
  {
    fbb_.AddOffset(Annotation::VT_PDU, pdu);
  }
  void add_decoder_crc_valid(bool decoder_crc_valid)
  {
    fbb_.AddElement<uint8_t>(Annotation::VT_DECODER_CRC_VALID,
                             static_cast<uint8_t>(decoder_crc_valid), 0);
  }
  void add_frequency_offset(double frequency_offset)
  {
    fbb_.AddElement<double>(Annotation::VT_FREQUENCY_OFFSET, frequency_offset, 0.0);
  }
  void add_decoder_corrected_bits(uint64_t decoder_corrected_bits)
  {
    fbb_.AddElement<uint64_t>(Annotation::VT_DECODER_CORRECTED_BITS,
                              decoder_corrected_bits, 0);
  }
  void add_time(flatbuffers::Offset<flatbuffers::String> time)
  {
    fbb_.AddOffset(Annotation::VT_TIME, time);
  }
  void add_decoder_symbol_erasures(uint64_t decoder_symbol_erasures)
  {
    fbb_.AddElement<uint64_t>(Annotation::VT_DECODER_SYMBOL_ERASURES,
                              decoder_symbol_erasures, 0);
  }
  void add_snr(double snr)
  {
    fbb_.AddElement<double>(Annotation::VT_SNR, snr, 0.0);
  }
  void add_decoder_name(flatbuffers::Offset<flatbuffers::String> decoder_name)
  {
    fbb_.AddOffset(Annotation::VT_DECODER_NAME, decoder_name);
  }
  void add_decoder_version(flatbuffers::Offset<flatbuffers::String>
                           decoder_version)
  {
    fbb_.AddOffset(Annotation::VT_DECODER_VERSION, decoder_version);
  }
  void add_symbol_timing_error(double symbol_timing_error)
  {
    fbb_.AddElement<double>(Annotation::VT_SYMBOL_TIMING_ERROR, symbol_timing_error,
                            0.0);
  }
  explicit AnnotationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
    : fbb_(_fbb)
  {
    start_ = fbb_.StartTable();
  }
  AnnotationBuilder &operator=(const AnnotationBuilder &);
  flatbuffers::Offset<Annotation> Finish()
  {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Annotation>(end);
    return o;
  }
};

inline flatbuffers::Offset<Annotation> CreateAnnotation(
  flatbuffers::FlatBufferBuilder &_fbb,
  flatbuffers::Offset<flatbuffers::String> pdu = 0,
  bool decoder_crc_valid = false,
  double frequency_offset = 0.0,
  uint64_t decoder_corrected_bits = 0,
  flatbuffers::Offset<flatbuffers::String> time = 0,
  uint64_t decoder_symbol_erasures = 0,
  double snr = 0.0,
  flatbuffers::Offset<flatbuffers::String> decoder_name = 0,
  flatbuffers::Offset<flatbuffers::String> decoder_version = 0,
  double symbol_timing_error = 0.0)
{
  AnnotationBuilder builder_(_fbb);
  builder_.add_symbol_timing_error(symbol_timing_error);
  builder_.add_snr(snr);
  builder_.add_decoder_symbol_erasures(decoder_symbol_erasures);
  builder_.add_decoder_corrected_bits(decoder_corrected_bits);
  builder_.add_frequency_offset(frequency_offset);
  builder_.add_decoder_version(decoder_version);
  builder_.add_decoder_name(decoder_name);
  builder_.add_time(time);
  builder_.add_pdu(pdu);
  builder_.add_decoder_crc_valid(decoder_crc_valid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Annotation> CreateAnnotationDirect(
  flatbuffers::FlatBufferBuilder &_fbb,
  const char *pdu = nullptr,
  bool decoder_crc_valid = false,
  double frequency_offset = 0.0,
  uint64_t decoder_corrected_bits = 0,
  const char *time = nullptr,
  uint64_t decoder_symbol_erasures = 0,
  double snr = 0.0,
  const char *decoder_name = nullptr,
  const char *decoder_version = nullptr,
  double symbol_timing_error = 0.0)
{
  auto pdu__ = pdu ? _fbb.CreateString(pdu) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto decoder_name__ = decoder_name ? _fbb.CreateString(decoder_name) : 0;
  auto decoder_version__ = decoder_version ? _fbb.CreateString(
                             decoder_version) : 0;
  return satnogs::CreateAnnotation(
           _fbb,
           pdu__,
           decoder_crc_valid,
           frequency_offset,
           decoder_corrected_bits,
           time__,
           decoder_symbol_erasures,
           snr,
           decoder_name__,
           decoder_version__,
           symbol_timing_error);
}

flatbuffers::Offset<Annotation> CreateAnnotation(flatbuffers::FlatBufferBuilder
    &_fbb, const AnnotationT *_o,
    const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DescrT : public flatbuffers::NativeTable {
  typedef Descr TableType;
  std::unique_ptr<satnogs::GlobalT> global;
  std::unique_ptr<satnogs::AnnotationT> annotation;
  std::unique_ptr<satnogs::CaptureT> capture;
  DescrT()
  {
  }
};

struct Descr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DescrT NativeTableType;
  typedef DescrBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable()
  {
    return DescrTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GLOBAL = 4,
    VT_ANNOTATION = 6,
    VT_CAPTURE = 8
  };
  const satnogs::Global *global() const
  {
    return GetPointer<const satnogs::Global *>(VT_GLOBAL);
  }
  const satnogs::Annotation *annotation() const
  {
    return GetPointer<const satnogs::Annotation *>(VT_ANNOTATION);
  }
  const satnogs::Capture *capture() const
  {
    return GetPointer<const satnogs::Capture *>(VT_CAPTURE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const
  {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GLOBAL) &&
           verifier.VerifyTable(global()) &&
           VerifyOffset(verifier, VT_ANNOTATION) &&
           verifier.VerifyTable(annotation()) &&
           VerifyOffset(verifier, VT_CAPTURE) &&
           verifier.VerifyTable(capture()) &&
           verifier.EndTable();
  }
  DescrT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr)
  const;
  void UnPackTo(DescrT *_o,
                const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Descr> Pack(flatbuffers::FlatBufferBuilder &_fbb,
                                         const DescrT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DescrBuilder {
  typedef Descr Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_global(flatbuffers::Offset<satnogs::Global> global)
  {
    fbb_.AddOffset(Descr::VT_GLOBAL, global);
  }
  void add_annotation(flatbuffers::Offset<satnogs::Annotation> annotation)
  {
    fbb_.AddOffset(Descr::VT_ANNOTATION, annotation);
  }
  void add_capture(flatbuffers::Offset<satnogs::Capture> capture)
  {
    fbb_.AddOffset(Descr::VT_CAPTURE, capture);
  }
  explicit DescrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
    : fbb_(_fbb)
  {
    start_ = fbb_.StartTable();
  }
  DescrBuilder &operator=(const DescrBuilder &);
  flatbuffers::Offset<Descr> Finish()
  {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Descr>(end);
    return o;
  }
};

inline flatbuffers::Offset<Descr> CreateDescr(
  flatbuffers::FlatBufferBuilder &_fbb,
  flatbuffers::Offset<satnogs::Global> global = 0,
  flatbuffers::Offset<satnogs::Annotation> annotation = 0,
  flatbuffers::Offset<satnogs::Capture> capture = 0)
{
  DescrBuilder builder_(_fbb);
  builder_.add_capture(capture);
  builder_.add_annotation(annotation);
  builder_.add_global(global);
  return builder_.Finish();
}

flatbuffers::Offset<Descr> CreateDescr(flatbuffers::FlatBufferBuilder &_fbb,
                                       const DescrT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GlobalT *Global::UnPack(const flatbuffers::resolver_function_t
                               *_resolver) const
{
  std::unique_ptr<satnogs::GlobalT> _o = std::unique_ptr<satnogs::GlobalT>
                                         (new GlobalT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Global::UnPackTo(GlobalT *_o,
                             const flatbuffers::resolver_function_t *_resolver) const
{
  (void)_o;
  (void)_resolver;
  {
    auto _e = station_id();
    _o->station_id = _e;
  }
  {
    auto _e = observation_id();
    _o->observation_id = _e;
  }
  {
    auto _e = network_url();
    if (_e) {
      _o->network_url = _e->str();
    }
  }
  {
    auto _e = tle();
    if (_e) {
      _o->tle = _e->str();
    }
  }
  {
    auto _e = transmitter();
    if (_e) {
      _o->transmitter = _e->str();
    }
  }
  {
    auto _e = encoding();
    if (_e) {
      _o->encoding = _e->str();
    }
  }
  {
    auto _e = client_version();
    if (_e) {
      _o->client_version = _e->str();
    }
  }
  {
    auto _e = observation_timeframe();
    if (_e) {
      _o->observation_timeframe = _e->str();
    }
  }
  {
    auto _e = decoder_phase();
    _o->decoder_phase = _e;
  }
  {
    auto _e = decoder_resampling_ratio();
    _o->decoder_resampling_ratio = _e;
  }
}

inline flatbuffers::Offset<Global> Global::Pack(flatbuffers::FlatBufferBuilder
    &_fbb, const GlobalT *_o, const flatbuffers::rehasher_function_t *_rehasher)
{
  return CreateGlobal(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Global> CreateGlobal(flatbuffers::FlatBufferBuilder
    &_fbb, const GlobalT *_o, const flatbuffers::rehasher_function_t *_rehasher)
{
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs {
    flatbuffers::FlatBufferBuilder *__fbb;
    const GlobalT *__o;
    const flatbuffers::rehasher_function_t *__rehasher;
  } _va = { &_fbb, _o, _rehasher};
  (void)_va;
  auto _station_id = _o->station_id;
  auto _observation_id = _o->observation_id;
  auto _network_url = _o->network_url.empty() ? 0 : _fbb.CreateString(
                        _o->network_url);
  auto _tle = _o->tle.empty() ? 0 : _fbb.CreateString(_o->tle);
  auto _transmitter = _o->transmitter.empty() ? 0 : _fbb.CreateString(
                        _o->transmitter);
  auto _encoding = _o->encoding.empty() ? 0 : _fbb.CreateString(_o->encoding);
  auto _client_version = _o->client_version.empty() ? 0 : _fbb.CreateString(
                           _o->client_version);
  auto _observation_timeframe = _o->observation_timeframe.empty() ? 0 :
                                _fbb.CreateString(_o->observation_timeframe);
  auto _decoder_phase = _o->decoder_phase;
  auto _decoder_resampling_ratio = _o->decoder_resampling_ratio;
  return satnogs::CreateGlobal(
           _fbb,
           _station_id,
           _observation_id,
           _network_url,
           _tle,
           _transmitter,
           _encoding,
           _client_version,
           _observation_timeframe,
           _decoder_phase,
           _decoder_resampling_ratio);
}

inline CaptureT *Capture::UnPack(const flatbuffers::resolver_function_t
                                 *_resolver) const
{
  std::unique_ptr<satnogs::CaptureT> _o = std::unique_ptr<satnogs::CaptureT>
                                          (new CaptureT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Capture::UnPackTo(CaptureT *_o,
                              const flatbuffers::resolver_function_t *_resolver) const
{
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<Capture> Capture::Pack(flatbuffers::FlatBufferBuilder
    &_fbb, const CaptureT *_o, const flatbuffers::rehasher_function_t *_rehasher)
{
  return CreateCapture(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Capture> CreateCapture(flatbuffers::FlatBufferBuilder
    &_fbb, const CaptureT *_o, const flatbuffers::rehasher_function_t *_rehasher)
{
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs {
    flatbuffers::FlatBufferBuilder *__fbb;
    const CaptureT *__o;
    const flatbuffers::rehasher_function_t *__rehasher;
  } _va = { &_fbb, _o, _rehasher};
  (void)_va;
  return satnogs::CreateCapture(
           _fbb);
}

inline AnnotationT *Annotation::UnPack(const flatbuffers::resolver_function_t
                                       *_resolver) const
{
  std::unique_ptr<satnogs::AnnotationT> _o =
    std::unique_ptr<satnogs::AnnotationT>(new AnnotationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Annotation::UnPackTo(AnnotationT *_o,
                                 const flatbuffers::resolver_function_t *_resolver) const
{
  (void)_o;
  (void)_resolver;
  {
    auto _e = pdu();
    if (_e) {
      _o->pdu = _e->str();
    }
  }
  {
    auto _e = decoder_crc_valid();
    _o->decoder_crc_valid = _e;
  }
  {
    auto _e = frequency_offset();
    _o->frequency_offset = _e;
  }
  {
    auto _e = decoder_corrected_bits();
    _o->decoder_corrected_bits = _e;
  }
  {
    auto _e = time();
    if (_e) {
      _o->time = _e->str();
    }
  }
  {
    auto _e = decoder_symbol_erasures();
    _o->decoder_symbol_erasures = _e;
  }
  {
    auto _e = snr();
    _o->snr = _e;
  }
  {
    auto _e = decoder_name();
    if (_e) {
      _o->decoder_name = _e->str();
    }
  }
  {
    auto _e = decoder_version();
    if (_e) {
      _o->decoder_version = _e->str();
    }
  }
  {
    auto _e = symbol_timing_error();
    _o->symbol_timing_error = _e;
  }
}

inline flatbuffers::Offset<Annotation> Annotation::Pack(
  flatbuffers::FlatBufferBuilder &_fbb, const AnnotationT *_o,
  const flatbuffers::rehasher_function_t *_rehasher)
{
  return CreateAnnotation(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Annotation> CreateAnnotation(
  flatbuffers::FlatBufferBuilder &_fbb, const AnnotationT *_o,
  const flatbuffers::rehasher_function_t *_rehasher)
{
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs {
    flatbuffers::FlatBufferBuilder *__fbb;
    const AnnotationT *__o;
    const flatbuffers::rehasher_function_t *__rehasher;
  } _va = { &_fbb, _o, _rehasher};
  (void)_va;
  auto _pdu = _o->pdu.empty() ? 0 : _fbb.CreateString(_o->pdu);
  auto _decoder_crc_valid = _o->decoder_crc_valid;
  auto _frequency_offset = _o->frequency_offset;
  auto _decoder_corrected_bits = _o->decoder_corrected_bits;
  auto _time = _o->time.empty() ? 0 : _fbb.CreateString(_o->time);
  auto _decoder_symbol_erasures = _o->decoder_symbol_erasures;
  auto _snr = _o->snr;
  auto _decoder_name = _o->decoder_name.empty() ? 0 : _fbb.CreateString(
                         _o->decoder_name);
  auto _decoder_version = _o->decoder_version.empty() ? 0 : _fbb.CreateString(
                            _o->decoder_version);
  auto _symbol_timing_error = _o->symbol_timing_error;
  return satnogs::CreateAnnotation(
           _fbb,
           _pdu,
           _decoder_crc_valid,
           _frequency_offset,
           _decoder_corrected_bits,
           _time,
           _decoder_symbol_erasures,
           _snr,
           _decoder_name,
           _decoder_version,
           _symbol_timing_error);
}

inline DescrT *Descr::UnPack(const flatbuffers::resolver_function_t *_resolver)
const
{
  std::unique_ptr<satnogs::DescrT> _o = std::unique_ptr<satnogs::DescrT>
                                        (new DescrT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Descr::UnPackTo(DescrT *_o,
                            const flatbuffers::resolver_function_t *_resolver) const
{
  (void)_o;
  (void)_resolver;
  {
    auto _e = global();
    if (_e) {
      _o->global = std::unique_ptr<satnogs::GlobalT>(_e->UnPack(_resolver));
    }
  }
  {
    auto _e = annotation();
    if (_e) {
      _o->annotation = std::unique_ptr<satnogs::AnnotationT>(_e->UnPack(_resolver));
    }
  }
  {
    auto _e = capture();
    if (_e) {
      _o->capture = std::unique_ptr<satnogs::CaptureT>(_e->UnPack(_resolver));
    }
  }
}

inline flatbuffers::Offset<Descr> Descr::Pack(flatbuffers::FlatBufferBuilder
    &_fbb, const DescrT *_o, const flatbuffers::rehasher_function_t *_rehasher)
{
  return CreateDescr(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Descr> CreateDescr(flatbuffers::FlatBufferBuilder
    &_fbb, const DescrT *_o, const flatbuffers::rehasher_function_t *_rehasher)
{
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs {
    flatbuffers::FlatBufferBuilder *__fbb;
    const DescrT *__o;
    const flatbuffers::rehasher_function_t *__rehasher;
  } _va = { &_fbb, _o, _rehasher};
  (void)_va;
  auto _global = _o->global ? CreateGlobal(_fbb, _o->global.get(), _rehasher) : 0;
  auto _annotation = _o->annotation ? CreateAnnotation(_fbb, _o->annotation.get(),
                     _rehasher) : 0;
  auto _capture = _o->capture ? CreateCapture(_fbb, _o->capture.get(),
                  _rehasher) : 0;
  return satnogs::CreateDescr(
           _fbb,
           _global,
           _annotation,
           _capture);
}

inline const flatbuffers::TypeTable *GlobalTypeTable()
{
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char *const names[] = {
    "station_id",
    "observation_id",
    "network_url",
    "tle",
    "transmitter",
    "encoding",
    "client_version",
    "observation_timeframe",
    "decoder_phase",
    "decoder_resampling_ratio"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 10, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *CaptureTypeTable()
{
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *AnnotationTypeTable()
{
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char *const names[] = {
    "pdu",
    "decoder_crc_valid",
    "frequency_offset",
    "decoder_corrected_bits",
    "time",
    "decoder_symbol_erasures",
    "snr",
    "decoder_name",
    "decoder_version",
    "symbol_timing_error"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 10, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DescrTypeTable()
{
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    satnogs::GlobalTypeTable,
    satnogs::AnnotationTypeTable,
    satnogs::CaptureTypeTable
  };
  static const char *const names[] = {
    "global",
    "annotation",
    "capture"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace satnogs

#endif  // FLATBUFFERS_GENERATED_SIGMFSATNOGS_SATNOGS_H_
